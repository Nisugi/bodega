name: Process Gist Upload

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write

jobs:
  extract-and-download:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'data-update')
    outputs:
      gist_id: ${{ steps.extract-gist.outputs.gist_id }}

    steps:
    - name: Extract gist URL from issue
      id: extract-gist
      run: |
        echo "Processing issue #${{ github.event.issue.number }}"

        # Use GitHub API to get issue body to avoid shell injection
        issue_body=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}" | \
          jq -r '.body')

        # Extract gist URL
        gist_url=$(echo "$issue_body" | grep -oP '\*\*Gist URL:\*\* \K(https://gist.github.com/[^\s]+)' || true)

        if [ -z "$gist_url" ]; then
          echo "No gist URL found in issue"
          exit 1
        fi

        echo "Found gist URL: $gist_url"

        # Extract gist ID
        gist_id=$(echo "$gist_url" | sed -n 's/.*github.com\/[^\/]*\/\([a-f0-9]*\).*/\1/p')

        if [ -z "$gist_id" ]; then
          echo "Could not extract gist ID from URL"
          exit 1
        fi

        echo "Gist ID: $gist_id"
        echo "gist_id=$gist_id" >> $GITHUB_OUTPUT

    - name: Download gist files
      run: |
        # Fetch gist metadata
        gist_api_url="https://api.github.com/gists/${{ steps.extract-gist.outputs.gist_id }}"
        echo "Fetching gist from: $gist_api_url"

        gist_data=$(curl -s "$gist_api_url")

        # Create directory for artifacts
        mkdir -p shop-data

        # Process each file
        files=$(echo "$gist_data" | jq -r '.files | keys[]')

        for file in $files; do
          if [[ "$file" == *.json ]]; then
            echo "Downloading file: $file"

            # Always use raw_url to ensure we get the full content
            raw_url=$(echo "$gist_data" | jq -r ".files[\"$file\"].raw_url")
            echo "Fetching from: $raw_url"

            # Download directly to shop-data directory
            curl -s "$raw_url" -o "shop-data/$file"

            # Show file size for verification
            size=$(stat -c%s "shop-data/$file")
            echo "Downloaded $file: $size bytes"
          fi
        done

        # List downloaded files
        echo "Downloaded files:"
        ls -la shop-data/

    - name: Upload shop data as artifact
      uses: actions/upload-artifact@v4
      with:
        name: shop-data-files
        path: shop-data/*.json
        retention-days: 1

  validate-data:
    runs-on: ubuntu-latest
    needs: extract-and-download

    steps:
    - name: Download shop data artifact
      uses: actions/download-artifact@v4
      with:
        name: shop-data-files
        path: shop-data

    - name: Validate JSON files
      id: validate
      run: |
        echo "Validating downloaded JSON files..."

        validation_failed=false
        valid_files=""

        for file in shop-data/*.json; do
          filename=$(basename "$file")
          echo "Validating $filename..."

          # Validate JSON syntax
          if ! jq . "$file" > /dev/null 2>&1; then
            echo "ERROR: Invalid JSON in $filename"
            validation_failed=true
            continue
          fi

          # Validate structure
          town=$(jq -r '.town' "$file")
          shops=$(jq -r '.shops | length' "$file")

          if [ "$town" == "null" ] || [ "$shops" == "null" ]; then
            echo "ERROR: Invalid data structure in $filename"
            validation_failed=true
            continue
          fi

          echo "‚úì Valid: $filename - $town with $shops shops"
          valid_files="$valid_files $filename"
        done

        if [ "$validation_failed" = true ]; then
          echo "validation_status=failed" >> $GITHUB_OUTPUT
        else
          echo "validation_status=passed" >> $GITHUB_OUTPUT
        fi

        echo "valid_files=$valid_files" >> $GITHUB_OUTPUT

    - name: Upload validation results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-results
        path: |
          shop-data/*.json
        retention-days: 7

  commit-changes:
    runs-on: ubuntu-latest
    needs: validate-data
    if: needs.validate-data.outputs.validation_status == 'passed'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download validated data
      uses: actions/download-artifact@v4
      with:
        name: shop-data-files
        path: temp-data

    - name: Update data files
      run: |
        echo "Updating data files..."

        # Ensure data directory exists
        mkdir -p data

        # Copy validated files to data directory
        for file in temp-data/*.json; do
          filename=$(basename "$file")
          echo "Updating data/$filename"
          cp "$file" "data/$filename"
        done

        # Show what's being committed
        echo "Files to be committed:"
        ls -la data/*.json

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Debug: Show current state
        echo "=== Current repository state ==="
        git status
        echo ""
        echo "=== Files in data directory ==="
        ls -la data/ || echo "data/ directory doesn't exist"
        echo ""
        echo "=== Files in temp-data directory ==="
        ls -la temp-data/ || echo "temp-data/ directory doesn't exist"
        echo ""
        echo "=== Git diff for data directory ==="
        git diff --name-only data/ || echo "No diff output"
        echo ""
        echo "=== Git diff summary ==="
        git diff --stat data/ || echo "No diff stat"
        echo ""

        # Check if there are any changes
        if git diff --quiet data/ && git diff --quiet --cached data/; then
          echo "No changes detected in data/ directory"

          # Force update with timestamp to ensure commit happens
          echo "Creating timestamp file to force commit..."
          echo "Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" > data/last_updated.txt
          echo "Data processed from issue #${{ github.event.issue.number }}" >> data/last_updated.txt

          git add data/
          git commit -m "Update shop data from gist upload (forced with timestamp)

        - Processed from issue #${{ github.event.issue.number }}
        - Gist data validated and merged using artifact pipeline
        - Files downloaded directly from raw URLs to handle large files
        - Forced commit with timestamp update

        Co-Authored-By: ${{ github.event.issue.user.login }} <${{ github.event.issue.user.id }}+${{ github.event.issue.user.login }}@users.noreply.github.com>"
        else
          echo "Changes detected - committing updates"
          git add data/
          git commit -m "Update shop data from gist upload

        - Processed from issue #${{ github.event.issue.number }}
        - Gist data validated and merged using artifact pipeline
        - Files downloaded directly from raw URLs to handle large files

        Co-Authored-By: ${{ github.event.issue.user.login }} <${{ github.event.issue.user.id }}+${{ github.event.issue.user.login }}@users.noreply.github.com>"
        fi

        git push origin main

    - name: Close issue with success message
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `‚úÖ **Shop data processed successfully!**

            The data from your gist has been validated and merged into the repository.
            The website will update automatically within 1-2 minutes.

            Processing details:
            - All files downloaded successfully
            - JSON validation passed
            - Data committed to repository

            Thank you for contributing to the shop database! üéâ`
          });

          await github.rest.issues.update({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'closed'
          });

  handle-failure:
    runs-on: ubuntu-latest
    needs: [extract-and-download, validate-data]
    if: failure()

    steps:
    - name: Download validation artifacts if available
      uses: actions/download-artifact@v4
      with:
        name: validation-results
        path: failed-data
      continue-on-error: true

    - name: Comment on issue with failure
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `‚ùå **Processing failed**

            There was an error processing your gist upload.

            Common issues to check:
            - The gist URL is correct and accessible
            - The JSON files are valid
            - The data structure matches the expected format (must have 'town' and 'shops' fields)

            The workflow artifacts have been preserved for debugging.
            Please review the error and try again, or contact support for help.`
          });

          await github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['processing-failed']
          });